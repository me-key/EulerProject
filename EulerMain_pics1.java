import java.util.List;
import java.util.ArrayList;
import java.util.Stack;
import java.util.Arrays;
import java.math.BigDecimal;
import java.io.File;

/**
 * Created by IntelliJ IDEA.
 * User: mickeys
 * Date: Jul 20, 2015
 * Time: 5:17:23 PM
 * To change this template use File | Settings | File Templates.
 */
public class EulerMain_pics1 {
    public static void main (String [] argv) {
        print("hello world");
        String url = argv[0];   //c:\pics
        print(url);
        //go over all sub folder, for each sub folder,
        //rename all the files to include the folder name and then move them to the top folder
        boolean flag = true;
        File file = new File(url);
        while (flag) {
        File[] files = file.listFiles();
            flag = false;
            for (File subfile : files) {
                if (subfile.isDirectory()) {
                    for (File subsubfile : subfile.listFiles()) {
                        String dest = url + "\\" + subsubfile.getAbsolutePath().replace(url+"\\", "").replace("\\","_");
                            subsubfile.renameTo(new File(dest));
                        }
                    subfile.delete();
                    flag = true;
                }
            }
        }

        //for (int i = 2; i < 100 ; i++)
//        if (isPrime(1000000))
//                print(1000000);
        //prob44();
        //prob31();
        //prob26();
//        for (int i = 1; i < 1000000 ; i++)
//                getFactors(i);
        //print(Arrays.toString( getFactors(i)));

        print("Finished");
    }

    public static boolean isPrime(int n) {
        for (int i = 2 ; i <= n / 2; i++)
            if (n % i == 0)
                return false;
        return true;
    }

    public static void print(Object s) {
        System.out.println(s);
    }

//    int[] arr = {200, 100, 50, 20, 10, 5, 2, 1};
//    static int idx = 0;
//    static int num;
//    public static int prob31(int n) {
//        if (n == 200) {
//            num++;
//            idx ++;
//            //prob31()
//        }
////        if (n > 200)
////            return;
//        if (n < 200)
//            return prob31(n + arr[idx]);
//
//    }

    //200 100 50 20 10 5 2 1
    public static void prob31() {
        int num = 0;
        int[] arr = {100, 50, 20, 10, 5, 2, 1};

        Stack<Integer> stack = new Stack<Integer>();
        int i,j,k;
        for (i = 0; i < arr.length; i++) {
            j = i;
            k = 100;
            int sum = 0;
            //while (j < arr.length){
            do {
              //  if (!stack.isEmpty())
              //      k = stack.peek();
                while (sum < 200){
                    sum += stack.push(arr[j]);
                    if (j < arr.length-1)
                         k = stack.peek();
                    //k++;
                }
                if (sum == 200) {
                    num++;
                    //print (stack);
                }

                int pop;
                do  {
                    pop = stack.pop();
                     if (stack.isEmpty())
                    break;
                    sum -= pop;
                } while (pop < k);

                boolean flag = false;
                while (j > 0 && arr[j-1] < k) {
                    j--;
                    flag = true;
                }
                if (stack.isEmpty())
                    break;
                k = stack.peek();
                //k--;
                if (j < arr.length-1 &&  !flag) {
                    j++;
                   // k++;
                }
//                else {
//                    sum -= stack.pop();
//                    j = k;
//                    k--;
//                }
            }
            while (!stack.isEmpty());
        }
        print(num + 1);
    }

//        Pentagonal numbers are generated by the formula, Pn=n(3n?1)/2. The first ten pentagonal numbers are:
//        1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
//        It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 ? 22 = 48, is not pentagonal.
//        Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk ? Pj| is minimised; what is the value of D?
    public static void prob44() {
        List<Integer> list = new ArrayList<Integer>();
        for (int i = 0; i < 10000; i++)
            list.add(calcPentNr(i+1));

        for (int i = 0; i < 10000; i++)
            for (int j = i+1; j < 10000; j++)
            {
                if (list.contains(list.get(i) + list.get(j)) && list.contains(list.get(j) - list.get(i)))
                    print(list.get(j) - list.get(i));
            }
        //System.out.println(list);
    }
    public static int calcPentNr(int n) {
        return n*(3*n - 1) / 2;
    }

    public static int[] getFactors(int n) {
        int[] arr = new int[1000];
        int j = 0;
        for (int i = 1; i <= n ; i ++)
            if (n % i == 0)
                arr[j++] = i;
                //print (i);
        return arr;
    }

    public static void prob386() {
        int i;


    }

    public static void prob26() {
        BigDecimal d = new BigDecimal(2);
        int max = 0, max_d = 0;
        for (; d.intValue() < 1000; d = d.add(BigDecimal.ONE)) {
            BigDecimal res = BigDecimal.ONE.divide(d,5000, BigDecimal.ROUND_UP);
            String s = res.toString().substring(500, 4990);
            for (int n = 1; n <s.length() / 2; n++) {
                String str = s.substring(0, n);
                if (s.substring(n, 2 * n).equals(str)) {
                    //print (n);
              ///      print("d = " + d + ", n = " + n + " , " + res + " , " + s );
                    if (n > max) {
                        max = n;
                        max_d = d.intValue();
                    }
                    break;
                }
                if (n == s.length() / 2) {
                    print ("Oops " + d);
                }
                //if (s.indexOf(str, n+1))
            }
            //s.


        }
        print (max + " : " + max_d);

    }

    //3 7 109 673
    public static void prob60() {
        BigDecimal n = new BigDecimal(676);
        while (true) {
            n = n.add(BigDecimal.ONE);

            //if (isPrime(n.))
        }
    }

}
